import { assertEquals } from "@std/assert";
import { chunk } from "@std/collections/chunk";

function potionsForMonster(c: string): number {
  return c === "B" ? 1 : c === "C" ? 3 : c === "D" ? 5 : 0;
}

function solve(input: string): number {
  return chunk(Array.from(input), 2)
    .map((monsters) => {
      const monsterCount = monsters.filter((m) => m !== "x").length;
      const bonus = monsterCount >= 2 ? monsterCount : 0;
      return monsters.map(potionsForMonster).reduce(
        (acc, cur) => acc + cur,
        0,
      ) +
        bonus;
    })
    .reduce((acc, cur) => acc + cur, 0);
}

Deno.test("solve", () => {
  assertEquals(solve(`AxBCDDCAxD`), 28);
});

if (import.meta.main) {
  const INPUT =
    `DDxBCDADBCAxBDCxDxCBBDDxDDBDCCxDABxDDxCBBxDACDBBCAAADCBxBBDxCDxDBADADAABxxDCDACBCACCDCABAxBBDBDBCCACDABCxDxDBBBDDDBCACBADDBADDACCBxBDAADCBAxDDAxCAACDACBBBBABDCDCBBDCBCBACxABCCAACCCCAxAAAxCBBDDADDBADABBBDDACDBACDABBCAAAABCCCBDADCBAxxCACBDDABBCDxDCADxCAxAAABBDBCDDAABAABDCDBCDBBCBCADADAABxxxADxCxxDxACxDBDDBADxAADDAAxDCDCDBBDDDDDAABDCADBDABDxCAxBACACDCBADAAACCABDBAAAxBCCDDDAxADxACDBxDABBBCBAACABCBACCABBBDACADCAADDDADADDAxBADxxCDBABxDACBCBACCCBCCDBBDDACCxAADCACDBDACCBCCBABABDADBADAAADCDCxxCDBDxxCxBCBBDADxDDDCBCBCBBCABBCCCDBBDCBACDBABABBDADCBCBBBBxBACCxABACxADABCBCBCCCDAABBBCxCCCCBDAxCDDDADADDxDDAADBAACBBBxBCDBBAxCCABxxCBCxABBABBACCBABDCAxDxBCBxDDxDCCABDBBCBCxCCABDDCACDBBxxDDCBxBBDDCDCDABBACDBCCBDCBDBBCAxCABxCABCADCBDACCBADCDAABACDCCDACDBCxCDABDDCDBCBCDDAABBCCABAxABxCBCCDCADxxxACxxABBCCBCADAABBDBAABADxxCACCBxBAABDCBBBADCDxDCADBAABDAADABDCDAACBBCCBCAxCCBDxCCBxDADADCDACCCDACCADBADxCBCACDBAADBCCCDxCAAxABCAxAABCDBxCDBAADCCCDAxCCBBBDABDCAxCADDADCAABDDCAACCABxABACCBCBDBACCDxBADACBDBACDCABxACDADAAxBCDAABBAADDDBDACDCBDBDxCxCCBACDDABCxACxCBxCCDBDCBAABDCAADACCDDBCCBBDACAACCCBAAxADxCADCxCxDDADDDDBAACxABDxBADCAxBDBDACBBABBCBBCDCCBDBBACABBCBCAABxDAABABCAAACCADAABDDDxBABCBAxDCACBAABADAADDDBCDBCBAACACABDBBABAADACABBBCBBxBBCCBBBCBACxxAADCACBADBDCxxCxxADAxDxABxAADCCABDDACBCDDDCDCBxCACAxDADxCDBCBBBCCADBCCADCAxDCDAACCAxCCBBAADBBDACBDxBBDADBCBCBCxADBDxDAxADCABxxxAxDBxDxBxDBADCAxBADCCCDACBCDDADBxDCCACDDBBCCCACxxDABDxDDADBCABABAADCxxABABCBAACBDxCABDDCCABBADCxCxxADACADDDBAAABCBxDBDxAABDCxBCDDAAADABACxDBDCDBDDACADCDCxAACABDABDBDDBDCDCxCAxBBDBDBACAACBCBABACDBCAxDDDBCBAAABxxDxDCxCAxCACACBxxDCCAAABBCDAADBBABABBDAAxAxABxCxDDAADABxDBCCDDBDBCAxDCAACCDAABABBxCCBDCABxBDxCDDDAxCBBBDBCBxAAAADCBCCBDAADCCBCxDBCBxBDDBDBACCDDDBBDABBDACACDBACDACBBAACBDABCDAADDDADBBACDBBABDCACDCABBBDBDADxxDAxxADBDDBxBCBDDBADCBxABBADBACCACDBxACBBCDADABACBxCDADxxBBAADBCDDCCDADBBABCCxBDBxDDCBCBAxADAACACABCCCACDADDAxADCxABCBCxBCDAxBDCACCCAxCCBxxDBCCABBCAAAAADACCABACDABCCCDxxCAAAAxDDCADBDBCBDBBBBABADBAxAxBDDxAAABCAxBDDxADDBCABBCDDDD`;
  console.log(solve(INPUT));
}
